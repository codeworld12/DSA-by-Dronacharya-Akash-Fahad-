# Check if a number is Armstrong Number or not
n = 15
l = str(n)
a = 0
for i in range(len(l)):
    a += int(l[i])**3
if a == n:
    print(f'it is armstrong :', n)
else:
    print(f'It is not: ', n)
  
  
# O/P : It is not:  15

# Check whether a number is Perfect Number or not
num=int(input("Enter the number: "))  
sum_v=0  
for i in range(1,num):  
    if (num%i==0):  
        sum_v=sum_v+i 
if(sum_v==num):  
    print("The entered number is a perfect number", num)  
else:  
    print("The entered number is not a perfect number", num)  
  
  
# O/P : "The entered number is a perfect number", 28

# Find Sum of AP Series
def main(a,d,n):
    c = a
    st = a
    for i in range(n-1):
        st += d
        c += st
    print(c)

if __name__ == "__main__":
    a, d, n = 2, 4, 5
    main(a,d,n)
    
# O/P: 50

# Check if given year is a leap year or not
year = 2018

if (year % 4 == 0 or year % 400 == 0) and year % 100 != 0:
    print(f"It is leap year {year}")
else:
    print(f"It is not year {year}")
    
# O/P : It is not year 2018

# Reverse digits of a number

n = 18
a = 0
x = 0
while n > 0:
    a = n % 10
    x = x * 10 + a
    n = n// 10
print(x)
    
    
# O/P : 81

# Factorial of a Number : Iterative and Recursive

n = 5
a = 1
for i in range(n, 0, -1):
    a *= i
print(a)

# O/P : 120

***************************
# Check if a number is a Strong Number or not
num = 145
st = str(num)
l = len(st)
val = 0
for i in st:
    n = int(i)
    ans = 1
    for i in range(n, 0, -1):
        ans *= i
    # print(ans)
    val += ans
if val == num:
    print("It is strong number",val)
else:
    print("It is not strong number", val)
    
# O/P: It is strong number 145

# Check if a number is Automorphic Number

n = 25
s  = str(n)
l = len(s)
summ = 0
a = str(n * n)
al = len(a)
v = al - l
res = a[v:]
if int(res) == n:
    print("number is a AutomorphicNumber", res)
else:
    print("number is a not AutomorphicNumber", res)

# O/P : number is a Automorphic Number 25

# Find GCD of two numbers

a, b = 10, 8
m = min(a,b)
maxi = 0
for i in range(1,m+1):
    if (a % i == 0 and b % i ==0):
        maxi = max(i, maxi)
        
print("GCD of two numbers", maxi)
    
# O/P: GCD of two numbers 2

# Find LCM of two numbers

a, b = 4, 8
m = min(a,b)
maxi = 0
for i in range(1,m+1):
    if (a % i == 0 and b % i ==0):
        maxi = max(i, maxi)

lcm = (a*b) // maxi
        
print("LCM of two numbers", lcm)
    
# O/P: LCM of two numbers 8

# Find LCM of two numbers

arr = [13,46,24,52,20,9]
n = 4

for i in range(n-1):
    for j in range(1, n):
        if arr[i] <= arr[j]:
    
# O/P: LCM of two numbers 8

# Convert Binary to Decimal

n = 8
ans = ""
while n >= 1:
    a = n % 2
    ans += str(a)
    n = n // 2
print("Binary to Decimal",ans[::-1])

# Convert Decimal to Binary

n = 8
ans = ""
while n >= 1:
    a = n % 2
    ans += str(a)
    n = n // 2
print("Binary to Decimal",ans[::-1])

# Convert Binary to Decimal
a = bin(42)
print(a[2:])

b = int("100", 2)
print(b)

# Convert digits/numbers to words
def convert_num_into_word(s):
    single_digit = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
    two_digits = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twelve"]
    tens_multiple = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
    tens_power = ["hundred", "thousand"]

    if len(s) == 0:
        print("")
        return
    elif len(s) == 1:
        print(single_digit[int(s[0])])
        return

    length = len(s)
    i = 0
    while i < len(s):
        if length > 2:
            if int(s[i]) != 0:
                print(single_digit[int(s[i])], end=" ")
                print(tens_power[length - 3], end=" ")
            length -= 1
        else:
            if int(s[i]) == 1:
                print(two_digits[int(s[i + 1])], end=" ")
                return
            elif int(s[i]) != 0:
                print(tens_multiple[int(s[i])], end=" ")
                if int(s[i + 1]) != 0:
                    print(single_digit[int(s[i + 1])], end=" ")
                return
        i += 1

# Example usage:
s = "21"
convert_num_into_word(s)

# Bubble Sort Algorithm 
def main(arr, n):
    for i in range(n-1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    print(arr)

if __name__ == "__main__":
    arr = [13,46,24,52,20,9]
    n = 6
    main(arr, n)

# Counting sort 

def main(arr, n):
    maxi = max(arr) + 1
    ar = [0]*maxi
    
    for i in arr:
        ar[i] += 1
    # ar = [0, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1]
    for i in range(1, len(ar)):
        ar[i] = ar[i-1] + ar[i]
    # ar = [0, 2, 3, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 8]
    op = [0]*len(arr)
    for i in range(n-1, -1, -1):
        b = ar[arr[i]] 
        ar[arr[i]] -= 1 
        op[b - 1] = arr[i]
        
    print(op)
    # [1, 1, 2, 3, 5, 5, 9, 13]
        
if __name__ == "__main__":
    arr = [13,1,5,2,3,1,5,9]
    n = len(arr)
    main(arr, n)
SELECT s.StateName, COUNT(c.CityID) AS CityCount
FROM States s
LEFT JOIN Cities c ON s.StateID = c.StateID
GROUP BY s.StateID, s.StateName
ORDER BY s.StateName;


#unique elements
def find_unique_elements(lists):
    # Find elements common to the first two lists
    common_elements = set(lists[0]) || set(lists[1])
    

    # Iterate through the rest of the lists and update common_elements
    for lst in lists[2:]:
        common_elements ||= set(lst)
    # print(common_elements)

    # Find elements that are present in the common_elements but not in the original lists
    unique_elements = set()
    for lst in lists:
        unique_elements.update(set(lst) - common_elements)

    return unique_elements

# Example usage:
list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]
list3 = [5, 6, 7, 8, 9,10]

result = find_unique_elements([list1, list2, list3])
print("Unique elements:", result)

